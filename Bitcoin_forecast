{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Trial 2",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPvuUGWKGxbqwz6d/jiV2H7",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/michaelmarchesi/Bitcoin_forecasting/blob/main/Bitcoin_forecast\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yy8FDDgeMs3M"
      },
      "source": [
        "import numpy as np\r\n",
        "import pandas as pd\r\n",
        "from keras.layers.core import Dense,Activation, Dropout\r\n",
        "from keras.layers.recurrent import LSTM\r\n",
        "from keras.models import Sequential\r\n",
        "from sklearn.preprocessing import MinMaxScaler\r\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "chPEh0kTM8C2",
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": "OK"
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "outputId": "b793a83c-6ffd-4acc-c933-47995a047be9"
      },
      "source": [
        "# Load data\r\n",
        "from google.colab import files\r\n",
        "uploaded = files.upload()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-70b6cc63-bad2-4edb-b3a7-dd4437f245fc\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-70b6cc63-bad2-4edb-b3a7-dd4437f245fc\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving Binance_BTCUSDT_1h.csv to Binance_BTCUSDT_1h.csv\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "rXRccqFXNsC3",
        "outputId": "9d58b016-75ca-43b1-cc11-5a971bc7850c"
      },
      "source": [
        "# Store data\r\n",
        "df = pd.read_csv('Binance_BTCUSDT_1h.csv')\r\n",
        "df.head(88)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>unix</th>\n",
              "      <th>date</th>\n",
              "      <th>symbol</th>\n",
              "      <th>open</th>\n",
              "      <th>high</th>\n",
              "      <th>low</th>\n",
              "      <th>close</th>\n",
              "      <th>Volume BTC</th>\n",
              "      <th>Volume USDT</th>\n",
              "      <th>tradecount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.502946e+09</td>\n",
              "      <td>2017-08-17 05-AM</td>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>4308.83</td>\n",
              "      <td>4328.69</td>\n",
              "      <td>4291.37</td>\n",
              "      <td>4315.32</td>\n",
              "      <td>23.2300</td>\n",
              "      <td>100304.82</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.502950e+09</td>\n",
              "      <td>2017-08-17 06-AM</td>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>4315.32</td>\n",
              "      <td>4345.45</td>\n",
              "      <td>4309.37</td>\n",
              "      <td>4324.35</td>\n",
              "      <td>7.2300</td>\n",
              "      <td>31282.31</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.502953e+09</td>\n",
              "      <td>2017-08-17 07-AM</td>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>4324.35</td>\n",
              "      <td>4349.99</td>\n",
              "      <td>4287.41</td>\n",
              "      <td>4349.99</td>\n",
              "      <td>4.4400</td>\n",
              "      <td>19241.06</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.502957e+09</td>\n",
              "      <td>2017-08-17 08-AM</td>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>4349.99</td>\n",
              "      <td>4377.85</td>\n",
              "      <td>4333.32</td>\n",
              "      <td>4360.69</td>\n",
              "      <td>0.9499</td>\n",
              "      <td>4139.70</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.502960e+09</td>\n",
              "      <td>2017-08-17 09-AM</td>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>4360.69</td>\n",
              "      <td>4445.78</td>\n",
              "      <td>4360.00</td>\n",
              "      <td>4444.00</td>\n",
              "      <td>10.7600</td>\n",
              "      <td>47219.36</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>83</th>\n",
              "      <td>1.503245e+09</td>\n",
              "      <td>2017-08-20 04-PM</td>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>4125.00</td>\n",
              "      <td>4150.00</td>\n",
              "      <td>4091.59</td>\n",
              "      <td>4131.46</td>\n",
              "      <td>23.1000</td>\n",
              "      <td>95236.86</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>84</th>\n",
              "      <td>1.503248e+09</td>\n",
              "      <td>2017-08-20 05-PM</td>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>4131.46</td>\n",
              "      <td>4138.07</td>\n",
              "      <td>4101.40</td>\n",
              "      <td>4129.00</td>\n",
              "      <td>49.2200</td>\n",
              "      <td>202834.01</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>85</th>\n",
              "      <td>1.503252e+09</td>\n",
              "      <td>2017-08-20 06-PM</td>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>4129.00</td>\n",
              "      <td>4158.61</td>\n",
              "      <td>4116.00</td>\n",
              "      <td>4154.56</td>\n",
              "      <td>48.0900</td>\n",
              "      <td>198738.21</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>86</th>\n",
              "      <td>1.503256e+09</td>\n",
              "      <td>2017-08-20 07-PM</td>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>4154.56</td>\n",
              "      <td>4185.94</td>\n",
              "      <td>4144.85</td>\n",
              "      <td>4164.60</td>\n",
              "      <td>48.3100</td>\n",
              "      <td>201272.01</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>87</th>\n",
              "      <td>1.503259e+09</td>\n",
              "      <td>2017-08-20 08-PM</td>\n",
              "      <td>BTC/USDT</td>\n",
              "      <td>4164.60</td>\n",
              "      <td>4171.62</td>\n",
              "      <td>4116.00</td>\n",
              "      <td>4140.93</td>\n",
              "      <td>53.2300</td>\n",
              "      <td>220263.55</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>88 rows × 10 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "            unix              date  ... Volume USDT  tradecount\n",
              "0   1.502946e+09  2017-08-17 05-AM  ...   100304.82         NaN\n",
              "1   1.502950e+09  2017-08-17 06-AM  ...    31282.31         NaN\n",
              "2   1.502953e+09  2017-08-17 07-AM  ...    19241.06         NaN\n",
              "3   1.502957e+09  2017-08-17 08-AM  ...     4139.70         NaN\n",
              "4   1.502960e+09  2017-08-17 09-AM  ...    47219.36         NaN\n",
              "..           ...               ...  ...         ...         ...\n",
              "83  1.503245e+09  2017-08-20 04-PM  ...    95236.86         NaN\n",
              "84  1.503248e+09  2017-08-20 05-PM  ...   202834.01         NaN\n",
              "85  1.503252e+09  2017-08-20 06-PM  ...   198738.21         NaN\n",
              "86  1.503256e+09  2017-08-20 07-PM  ...   201272.01         NaN\n",
              "87  1.503259e+09  2017-08-20 08-PM  ...   220263.55         NaN\n",
              "\n",
              "[88 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KXsyw4BUNyxE"
      },
      "source": [
        "# Modify data\r\n",
        "df.drop(['unix','symbol', 'Volume BTC', 'Volume USDT', 'tradecount'],1, inplace=True)\r\n",
        "df.head(9)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "orZ0BjWlN37M",
        "outputId": "f2a89e3d-71c8-4f3e-cff4-f92e828217bb"
      },
      "source": [
        "prediction_days = 90\r\n",
        "df['Prediction'] = df[['open']].shift(-prediction_days)\r\n",
        "price_close = df[['close']]\r\n",
        "price_open = df[['open']] \r\n",
        "price_high = df[['high']]\r\n",
        "price_low = df[['low']]\r\n",
        "\r\n",
        "# Create data set\r\n",
        "\r\n",
        "X = np.array(df.drop(['Prediction'],1))\r\n",
        "\r\n",
        "X = X[:len(df)-prediction_days]\r\n",
        "print(X)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[['2017-08-17 05-AM' 4308.83 4328.69 4291.37 4315.32]\n",
            " ['2017-08-17 06-AM' 4315.32 4345.45 4309.37 4324.35]\n",
            " ['2017-08-17 07-AM' 4324.35 4349.99 4287.41 4349.99]\n",
            " ...\n",
            " ['2021-02-05 6:00' 37065.98 37658.0 37021.8 37375.52]\n",
            " ['2021-02-05 5:00' 37266.79 37350.33 36995.27 37065.97]\n",
            " ['2021-02-05 4:00' 37366.01 37499.0 37187.81 37266.78]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x-mkb7AHVewo",
        "outputId": "40c6949f-acc6-4a51-b41c-d0e74f15c36d"
      },
      "source": [
        "# Create dependent data set\r\n",
        "y = np.array(df['Prediction'])\r\n",
        "\r\n",
        "y = y[:-prediction_days]\r\n",
        "print(y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[ 4169.98  4086.29  4108.28 ... 44151.08 46374.86 44682.76]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VG1IIp0DVtWA"
      },
      "source": [
        "def create_datasets(dataset, sl):\r\n",
        "  sl += 1\r\n",
        "  sd =[]\r\n",
        "  for i in range(len(dataset)-sl):\r\n",
        "    sd.append(dataset[i: i+sl])\r\n",
        "  sd = np.array(sd)\r\n",
        "\r\n",
        "  data_x = sd[:,:-1]\r\n",
        "  data_y = sd[:,-1]\r\n",
        "  \r\n",
        "  return data_x, data_y\r\n",
        "\r\n",
        "scaler = MinMaxScaler(feature_range=(0,1))\r\n",
        "currency_close_price_scaled = scaler.fit_transform(price_close)\r\n",
        "currency_open_price_scaled = scaler.fit_transform(price_open)\r\n",
        "currency_high_price_scaled = scaler.fit_transform(price_high)\r\n",
        "currency_low_price_scaled = scaler.fit_transform(price_low)\r\n",
        "\r\n",
        "\r\n",
        "train_size_close = int(len(currency_close_price_scaled)* 0.5)\r\n",
        "train_size_open = int(len(currency_open_price_scaled)* 0.5)\r\n",
        "train_size_high = int(len(currency_high_price_scaled)* 0.5)\r\n",
        "train_size_low = int(len(currency_low_price_scaled)* 0.5)\r\n",
        "\r\n",
        "\r\n",
        "\r\n",
        "\r\n",
        "test_size_close = len(currency_close_price_scaled)-train_size_close\r\n",
        "test_size_open = len(currency_open_price_scaled)-train_size_open\r\n",
        "test_size_high = len(currency_high_price_scaled)-train_size_high\r\n",
        "test_size_low = len(currency_low_price_scaled)-train_size_low\r\n",
        "\r\n",
        "\r\n",
        "\r\n",
        "train_close, test_close = currency_close_price_scaled[0:test_size_close,:], currency_close_price_scaled[test_size_close:len(currency_close_price_scaled)]\r\n",
        "train_open, test_open = currency_open_price_scaled[0:test_size_open,:], currency_close_price_scaled[test_size_open:len(currency_close_price_scaled)]\r\n",
        "train_high, test_high = currency_high_price_scaled[0:test_size_high,:], currency_close_price_scaled[test_size_high:len(currency_close_price_scaled)]\r\n",
        "train_low, test_low = currency_low_price_scaled[0:test_size_low,:], currency_close_price_scaled[test_size_low:len(currency_close_price_scaled)]\r\n",
        "\r\n",
        "look_back = 20\r\n",
        "\r\n",
        "\r\n",
        "\r\n",
        "\r\n",
        "\r\n",
        "x_train_close, y_train_close = create_datasets(train_close, look_back)\r\n",
        "x_train_open, y_train_open = create_datasets(train_open, look_back)\r\n",
        "x_train_high, y_train_high = create_datasets(train_high, look_back)\r\n",
        "x_train_low, y_train_low = create_datasets(train_low, look_back)\r\n",
        "\r\n",
        "\r\n",
        "x_test_close, y_test_close = create_datasets(test_close,look_back)\r\n",
        "x_test_open, y_test_open = create_datasets(test_open,look_back)\r\n",
        "x_test_high, y_test_high = create_datasets(test_high,look_back)\r\n",
        "x_test_low, y_test_low = create_datasets(test_low,look_back)\r\n",
        "\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nGeodiFqV4tq"
      },
      "source": [
        "#build model\r\n",
        "\r\n",
        "model = Sequential()\r\n",
        "\r\n",
        "model.add(LSTM(100,\r\n",
        "    input_shape=(20,1),\r\n",
        "    return_sequences=True))\r\n",
        "model.add(Dropout(0))\r\n",
        "\r\n",
        "model.add(LSTM(100,\r\n",
        "    return_sequences=False))\r\n",
        "model.add(Dropout(0))\r\n",
        "\r\n",
        "model.add(Dense(1))\r\n",
        "\r\n",
        "model.add(Activation('linear'))\r\n",
        "model.compile(loss='mse', optimizer='rmsprop',metrics=['acc'])\r\n",
        "\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uPV-6e1oV6OG",
        "outputId": "9988f53f-94ea-40bd-aeb3-2be49be6d1f7"
      },
      "source": [
        "iters = 25\r\n",
        "history_close = model.fit(x_train_close, y_train_close, batch_size=256, epochs=iters, verbose=1, validation_split=0.2)\r\n",
        "history_open = model.fit(x_train_open, y_train_open, batch_size=256, epochs=iters, verbose=1, validation_split=0.2)\r\n",
        "history_high = model.fit(x_train_high, y_train_high, batch_size=256, epochs=iters, verbose=1, validation_split=0.2)\r\n",
        "history_low = model.fit(x_train_low, y_train_low, batch_size=256, epochs=iters, verbose=1, validation_split=0.2)\r\n",
        "\r\n",
        "\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/25\n",
            "52/52 [==============================] - 13s 190ms/step - loss: 0.0023 - acc: 1.7005e-05 - val_loss: 3.0615e-04 - val_acc: 0.0000e+00\n",
            "Epoch 2/25\n",
            "52/52 [==============================] - 9s 174ms/step - loss: 3.1737e-04 - acc: 9.1335e-05 - val_loss: 3.6939e-04 - val_acc: 0.0000e+00\n",
            "Epoch 3/25\n",
            "52/52 [==============================] - 9s 173ms/step - loss: 2.9286e-04 - acc: 2.0078e-04 - val_loss: 8.7287e-05 - val_acc: 0.0000e+00\n",
            "Epoch 4/25\n",
            "52/52 [==============================] - 9s 171ms/step - loss: 2.1723e-04 - acc: 2.8221e-05 - val_loss: 1.4377e-04 - val_acc: 0.0000e+00\n",
            "Epoch 5/25\n",
            "52/52 [==============================] - 9s 171ms/step - loss: 2.0620e-04 - acc: 1.0151e-04 - val_loss: 1.2287e-04 - val_acc: 0.0000e+00\n",
            "Epoch 6/25\n",
            "52/52 [==============================] - 9s 173ms/step - loss: 1.7263e-04 - acc: 4.3913e-05 - val_loss: 1.5695e-04 - val_acc: 0.0000e+00\n",
            "Epoch 7/25\n",
            "52/52 [==============================] - 9s 171ms/step - loss: 1.5427e-04 - acc: 9.6248e-05 - val_loss: 1.6531e-04 - val_acc: 0.0000e+00\n",
            "Epoch 8/25\n",
            "52/52 [==============================] - 9s 170ms/step - loss: 1.4609e-04 - acc: 3.6775e-05 - val_loss: 5.3317e-05 - val_acc: 0.0000e+00\n",
            "Epoch 9/25\n",
            "52/52 [==============================] - 9s 172ms/step - loss: 1.1390e-04 - acc: 7.8298e-05 - val_loss: 3.7027e-05 - val_acc: 0.0000e+00\n",
            "Epoch 10/25\n",
            "52/52 [==============================] - 9s 172ms/step - loss: 8.8752e-05 - acc: 6.7224e-05 - val_loss: 1.7300e-04 - val_acc: 0.0000e+00\n",
            "Epoch 11/25\n",
            "52/52 [==============================] - 9s 172ms/step - loss: 1.0094e-04 - acc: 1.3615e-05 - val_loss: 1.4335e-04 - val_acc: 0.0000e+00\n",
            "Epoch 12/25\n",
            "52/52 [==============================] - 9s 171ms/step - loss: 8.4277e-05 - acc: 5.1816e-05 - val_loss: 8.2200e-05 - val_acc: 0.0000e+00\n",
            "Epoch 13/25\n",
            "52/52 [==============================] - 9s 171ms/step - loss: 9.6142e-05 - acc: 6.0670e-05 - val_loss: 6.1142e-05 - val_acc: 0.0000e+00\n",
            "Epoch 14/25\n",
            "52/52 [==============================] - 9s 169ms/step - loss: 1.0170e-04 - acc: 1.0718e-04 - val_loss: 1.1435e-04 - val_acc: 0.0000e+00\n",
            "Epoch 15/25\n",
            "52/52 [==============================] - 9s 170ms/step - loss: 9.6045e-05 - acc: 2.6219e-04 - val_loss: 3.0353e-05 - val_acc: 0.0000e+00\n",
            "Epoch 16/25\n",
            "52/52 [==============================] - 9s 170ms/step - loss: 8.0489e-05 - acc: 9.6248e-05 - val_loss: 1.1024e-04 - val_acc: 0.0000e+00\n",
            "Epoch 17/25\n",
            "52/52 [==============================] - 9s 169ms/step - loss: 7.8263e-05 - acc: 1.0718e-04 - val_loss: 5.2734e-05 - val_acc: 0.0000e+00\n",
            "Epoch 18/25\n",
            "52/52 [==============================] - 9s 169ms/step - loss: 6.1640e-05 - acc: 9.6248e-05 - val_loss: 7.1506e-05 - val_acc: 0.0000e+00\n",
            "Epoch 19/25\n",
            "52/52 [==============================] - 9s 171ms/step - loss: 7.1176e-05 - acc: 7.2718e-06 - val_loss: 1.8006e-05 - val_acc: 0.0000e+00\n",
            "Epoch 20/25\n",
            "52/52 [==============================] - 9s 170ms/step - loss: 5.7017e-05 - acc: 9.6248e-05 - val_loss: 1.1794e-05 - val_acc: 0.0000e+00\n",
            "Epoch 21/25\n",
            "52/52 [==============================] - 9s 170ms/step - loss: 5.5795e-05 - acc: 1.4480e-04 - val_loss: 1.7314e-05 - val_acc: 0.0000e+00\n",
            "Epoch 22/25\n",
            "52/52 [==============================] - 9s 171ms/step - loss: 5.1891e-05 - acc: 1.6761e-04 - val_loss: 4.6195e-05 - val_acc: 0.0000e+00\n",
            "Epoch 23/25\n",
            "52/52 [==============================] - 9s 177ms/step - loss: 5.3438e-05 - acc: 3.0268e-05 - val_loss: 2.9455e-05 - val_acc: 0.0000e+00\n",
            "Epoch 24/25\n",
            "52/52 [==============================] - 9s 172ms/step - loss: 5.2879e-05 - acc: 4.6454e-05 - val_loss: 9.5446e-06 - val_acc: 0.0000e+00\n",
            "Epoch 25/25\n",
            "52/52 [==============================] - 9s 170ms/step - loss: 5.5721e-05 - acc: 8.8072e-06 - val_loss: 3.7119e-05 - val_acc: 0.0000e+00\n",
            "Epoch 1/25\n",
            "52/52 [==============================] - 9s 172ms/step - loss: 5.2592e-05 - acc: 7.5483e-05 - val_loss: 1.6399e-05 - val_acc: 0.0000e+00\n",
            "Epoch 2/25\n",
            "52/52 [==============================] - 9s 170ms/step - loss: 5.2814e-05 - acc: 7.5483e-05 - val_loss: 2.7292e-05 - val_acc: 0.0000e+00\n",
            "Epoch 3/25\n",
            "52/52 [==============================] - 9s 175ms/step - loss: 5.1759e-05 - acc: 7.5483e-05 - val_loss: 4.3628e-05 - val_acc: 0.0000e+00\n",
            "Epoch 4/25\n",
            "52/52 [==============================] - 10s 190ms/step - loss: 4.9982e-05 - acc: 7.5483e-05 - val_loss: 3.2347e-05 - val_acc: 0.0000e+00\n",
            "Epoch 5/25\n",
            "52/52 [==============================] - 14s 273ms/step - loss: 4.5035e-05 - acc: 7.5483e-05 - val_loss: 2.4781e-05 - val_acc: 0.0000e+00\n",
            "Epoch 6/25\n",
            "52/52 [==============================] - 9s 175ms/step - loss: 4.8893e-05 - acc: 7.5483e-05 - val_loss: 1.2895e-05 - val_acc: 0.0000e+00\n",
            "Epoch 7/25\n",
            "52/52 [==============================] - 9s 175ms/step - loss: 4.4312e-05 - acc: 7.5483e-05 - val_loss: 2.8721e-05 - val_acc: 0.0000e+00\n",
            "Epoch 8/25\n",
            "52/52 [==============================] - 9s 174ms/step - loss: 4.3259e-05 - acc: 7.5483e-05 - val_loss: 3.1777e-05 - val_acc: 0.0000e+00\n",
            "Epoch 9/25\n",
            "52/52 [==============================] - 9s 175ms/step - loss: 4.3953e-05 - acc: 7.5483e-05 - val_loss: 2.5932e-05 - val_acc: 0.0000e+00\n",
            "Epoch 10/25\n",
            "52/52 [==============================] - 9s 177ms/step - loss: 4.3386e-05 - acc: 7.5483e-05 - val_loss: 1.2261e-05 - val_acc: 0.0000e+00\n",
            "Epoch 11/25\n",
            " 5/52 [=>............................] - ETA: 7s - loss: 3.7860e-05 - acc: 0.0000e+00"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "cellView": "code",
        "id": "Rz1m46NWZ9kN"
      },
      "source": [
        "#@title Default title text\n",
        "plt.plot(history_close.history['loss'])\n",
        "plt.plot(history_close.history['val_loss'])\n",
        "plt.plot(history_open.history['loss'])\n",
        "plt.plot(history_open.history['val_loss'])\n",
        "plt.plot(history_high.history['loss'])\n",
        "plt.plot(history_high.history['val_loss'])\n",
        "plt.plot(history_low.history['loss'])\n",
        "plt.plot(history_low.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'validation'], loc='upper left')\n",
        "plt.show()\n",
        "# model.metrics_names\n",
        "# plt.plot(history.history['acc'])\n",
        "# plt.plot(history.history['val_acc'])\n",
        "# plt.legend(['accuracy','validation accuracy'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_LqQ6_mdi5vj"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "K0g12pndbC_Q"
      },
      "source": [
        "import plotly.graph_objects as go\r\n",
        "train_predict_close = model.predict(x_train_close)\r\n",
        "test_predict_close = model.predict(x_test_close)\r\n",
        "train_predict_open = model.predict(x_train_open)\r\n",
        "test_predict_open = model.predict(x_test_open)\r\n",
        "train_predict_high = model.predict(x_train_high)\r\n",
        "test_predict_high = model.predict(x_test_high)\r\n",
        "train_predict_low = model.predict(x_train_low)\r\n",
        "test_predict_low = model.predict(x_test_low)\r\n",
        "\r\n",
        "\r\n",
        "train_predict_unnorm_close = scaler.inverse_transform(train_predict_close)\r\n",
        "test_predict_unnorm_close = scaler.inverse_transform(test_predict_close)\r\n",
        "train_predict_unnorm_open = scaler.inverse_transform(train_predict_open)\r\n",
        "test_predict_unnorm_open = scaler.inverse_transform(test_predict_open)\r\n",
        "train_predict_unnorm_high = scaler.inverse_transform(train_predict_high)\r\n",
        "test_predict_unnorm_high = scaler.inverse_transform(test_predict_high)\r\n",
        "train_predict_unnorm_low = scaler.inverse_transform(train_predict_low)\r\n",
        "test_predict_unnorm_low = scaler.inverse_transform(test_predict_low)\r\n",
        "\r\n",
        "\r\n",
        "trainPredictPlot_close = np.empty_like(price_close)\r\n",
        "trainPredictPlot_open = np.empty_like(price_open)\r\n",
        "trainPredictPlot_high = np.empty_like(price_high)\r\n",
        "trainPredictPlot_low = np.empty_like(price_low)\r\n",
        "\r\n",
        "\r\n",
        "trainPredictPlot_close[:,:] = np.nan\r\n",
        "trainPredictPlot_open[:,:] = np.nan\r\n",
        "trainPredictPlot_high[:,:] = np.nan\r\n",
        "trainPredictPlot_low[:,:] = np.nan\r\n",
        "\r\n",
        "trainPredictPlot_close[look_back:len(train_predict_unnorm_close)+look_back,:] = train_predict_unnorm_close\r\n",
        "trainPredictPlot_open[look_back:len(train_predict_unnorm_open)+look_back,:] = train_predict_unnorm_open\r\n",
        "trainPredictPlot_high[look_back:len(train_predict_unnorm_high)+look_back,:] = train_predict_unnorm_high\r\n",
        "trainPredictPlot_low[look_back:len(train_predict_unnorm_low)+look_back,:] = train_predict_unnorm_low\r\n",
        "\r\n",
        "testPredictPlot_close = np.empty_like(price_close)\r\n",
        "testPredictPlot_open = np.empty_like(price_open)\r\n",
        "testPredictPlot_high = np.empty_like(price_high)\r\n",
        "testPredictPlot_low = np.empty_like(price_low)\r\n",
        "testPredictPlot_close[:,:] = np.nan\r\n",
        "testPredictPlot_open[:,:] = np.nan\r\n",
        "testPredictPlot_high[:,:] = np.nan\r\n",
        "testPredictPlot_low[:,:] = np.nan\r\n",
        "\r\n",
        "testPredictPlot_close[len(train_predict_unnorm_close)+(look_back*2)+1:len(price_close)-1,:] = train_predict_unnorm_close\r\n",
        "testPredictPlot_open[len(train_predict_unnorm_open)+(look_back*2)+1:len(price_open)-1,:] = train_predict_unnorm_open\r\n",
        "testPredictPlot_high[len(train_predict_unnorm_high)+(look_back*2)+1:len(price_high)-1,:] = train_predict_unnorm_high\r\n",
        "testPredictPlot_low[len(train_predict_unnorm_low)+(look_back*2)+1:len(price_low)-1,:] = train_predict_unnorm_low\r\n",
        "\r\n",
        "\r\n",
        "plt.figure(figsize=(50,50))\r\n",
        "\r\n",
        "plt.plot(price_close,'g',label ='original close data')\r\n",
        "plt.plot(trainPredictPlot_close, 'r', label='training close set')\r\n",
        "plt.plot(testPredictPlot_close, 'r', label = 'predicted close set')\r\n",
        "plt.legend(loc ='upper left')\r\n",
        "plt.xlabel('time in days')\r\n",
        "plt.ylabel('price')\r\n",
        "plt.grid()\r\n",
        "plt.show\r\n",
        "\r\n",
        "\r\n",
        "plt.plot(price_open,'g',label ='original open data')\r\n",
        "plt.plot(trainPredictPlot_open, 'b', label='training open set')\r\n",
        "plt.plot(testPredictPlot_open, 'b', label = 'predicted open set')\r\n",
        "plt.legend(loc ='upper left')\r\n",
        "plt.xlabel('time in days')\r\n",
        "plt.ylabel('price')\r\n",
        "plt.grid()\r\n",
        "plt.show\r\n",
        "\r\n",
        "\r\n",
        "plt.plot(price_high,'g',label ='original high data')\r\n",
        "plt.plot(trainPredictPlot_high, 'g', label='training high set')\r\n",
        "plt.plot(testPredictPlot_high, 'g', label = 'predicted high set')\r\n",
        "plt.legend(loc ='upper left')\r\n",
        "plt.xlabel('time in days')\r\n",
        "plt.ylabel('price')\r\n",
        "plt.grid()\r\n",
        "plt.show\r\n",
        "\r\n",
        "\r\n",
        "# plt.plot(price_low,'g',label ='original close data')\r\n",
        "# plt.plot(trainPredictPlot_low, 'y', label='training low set')\r\n",
        "# plt.plot(testPredictPlot_low, 'y', label = 'predicted low set')\r\n",
        "# plt.legend(loc ='upper left')\r\n",
        "# plt.xlabel('time in days')\r\n",
        "# plt.ylabel('price')\r\n",
        "# plt.grid()\r\n",
        "# plt.show\r\n",
        "\r\n",
        "\r\n",
        "\r\n",
        "# Create figure\r\n",
        "# fig = go.Figure()\r\n",
        "\r\n",
        "# fig.add_trace(\r\n",
        "#     go.Candlestick(x=list(df.date),open=list(df.open), high=list(df.high), low=list(df.low), close=list(df.close)))\r\n",
        "\r\n",
        "# # Set title\r\n",
        "# fig.update_layout(\r\n",
        "#     title_text=\"Time series with range slider and selectors\"\r\n",
        "# )\r\n",
        "\r\n",
        "# Add range slider\r\n",
        "# fig.update_layout(\r\n",
        "#     xaxis=dict(\r\n",
        "#         rangeselector=dict(\r\n",
        "#             buttons=list([\r\n",
        "#                 dict(count=1,\r\n",
        "#                      label=\"1m\",\r\n",
        "#                      step=\"month\",\r\n",
        "#                      stepmode=\"backward\"),\r\n",
        "#                 dict(count=6,\r\n",
        "#                      label=\"6m\",\r\n",
        "#                      step=\"month\",\r\n",
        "#                      stepmode=\"backward\"),\r\n",
        "#                 dict(count=1,\r\n",
        "#                      label=\"YTD\",\r\n",
        "#                      step=\"year\",\r\n",
        "#                      stepmode=\"todate\"),\r\n",
        "#                 dict(count=1,\r\n",
        "#                      label=\"1y\",\r\n",
        "#                      step=\"year\",\r\n",
        "#                      stepmode=\"backward\"),\r\n",
        "#                 dict(step=\"all\")\r\n",
        "#             ])\r\n",
        "#         ),\r\n",
        "#         rangeslider=dict(\r\n",
        "#             visible=True\r\n",
        "#         ),\r\n",
        "#         type=\"date\"\r\n",
        "#     )\r\n",
        "# )\r\n",
        "\r\n",
        "# fig.show()\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1QHAROxCcNy1"
      },
      "source": [
        "import plotly.graph_objects as go\r\n",
        "\r\n",
        "# Create figure\r\n",
        "fig = go.Figure()\r\n",
        "\r\n",
        "fig.add_trace(\r\n",
        "    go.Candlestick(x=list(df.date),open=list(df.open), high=list(df.high), low=list(df.low), close=list(df.close)))\r\n",
        "# Add range slider\r\n",
        "fig.update_layout(\r\n",
        "    xaxis=dict(\r\n",
        "        rangeselector=dict(\r\n",
        "            buttons=list([\r\n",
        "                dict(count=1,\r\n",
        "                     label=\"1m\",\r\n",
        "                     step=\"month\",\r\n",
        "                     stepmode=\"backward\"),\r\n",
        "                dict(count=6,\r\n",
        "                     label=\"6m\",\r\n",
        "                     step=\"month\",\r\n",
        "                     stepmode=\"backward\"),\r\n",
        "                dict(count=1,\r\n",
        "                     label=\"YTD\",\r\n",
        "                     step=\"year\",\r\n",
        "                     stepmode=\"todate\"),\r\n",
        "                dict(count=1,\r\n",
        "                     label=\"1y\",\r\n",
        "                     step=\"year\",\r\n",
        "                     stepmode=\"backward\"),\r\n",
        "                dict(step=\"all\")\r\n",
        "            ])\r\n",
        "        ),\r\n",
        "        rangeslider=dict(\r\n",
        "            visible=True\r\n",
        "        ),\r\n",
        "        type=\"date\"\r\n",
        "    )\r\n",
        ")\r\n",
        "fig.update_yaxes(fixedrange=False)\r\n",
        "fig.show()\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9StaIBQmyTX8"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}